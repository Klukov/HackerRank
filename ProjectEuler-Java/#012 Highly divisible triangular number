import java.io.*;
import java.util.*;

public class Solution {
    // triangular number -> divisors
    public static HashMap <Long,Integer> divisors = new HashMap <>();
    
    public static long magic (int n) {
        if (n == 0) {return 1;}
        if (n == 1) {return 3;}
        if (n == 2) {return 6;}
        long triangleNum = 3;
        int i = 2;
        int iter = 2;
        while (i <= n) {
            triangleNum = (iter+1)*iter/2;
            i = numberOfDivisons(triangleNum);
            iter++;
        }
        return triangleNum;
    }
    
    public static int numberOfDivisons (long n) {
        if (divisors.containsKey(n)) {
            return divisors.get(n);
        }
        long number = n;
        int div = 1;
        int count = 0;
        while (n % 2 == 0) {
                count++;
                n = n / 2;
        }
        div = div * (count+1);
        for (long i = 3; i*i < n+1; i= i+2) {
            if (!isPrimeNumber(i)) {continue;}
            count = 0;
            while (n % i == 0) {
                count++;
                n = (long) n / i;
            }
            div = div * (count+1);
            if (n == 1) {
                divisors.put(number, div);
                return div;
            }
        }
        if (n > 1) {div = div*2;}
        divisors.put(number, div);
        return div;
    }
    
    public static boolean isPrimeNumber (long num) {
        if (num == 1) {return true;}
        if (num == 2) {return true;}
        if (num%2 == 0) {return false;}
        if (num == 3) {return true;}
        for (long i = 3; i < Math.sqrt(num)+1; i=i+2){
            if (num%i == 0) {return false;}
        }
        return true;
    }
    
    public static long getTriangle(int n) {
        long sol = (long) (n*(n+1)/2);
        return sol;
    }
    
    public static long nextTriangle(long n) {
       long next = n + (1+ (long)Math.sqrt(1+8*n))/2;
       return next;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = in.nextInt();
        for (int a0 = 0; a0 < t; a0++) {
            int n = in.nextInt();
            System.out.println(magic(n));
        }
    }
}
